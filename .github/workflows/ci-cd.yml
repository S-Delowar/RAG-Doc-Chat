name: RAG-Doc-Chat CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Pytest Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
            
    env:
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: "5432"
      DEBUG: "TRUE"
      DJANGO_SECRET_KEY: testing-secret-key
      # Dummy API keys (so code doesn't break)
      OPENAI_API_KEY: dummy
      TAVILY_API_KEY: dummy
      LANGSMITH_API_KEY: dummy
      LANGCHAIN_PROJECT: dummy
      LANGSMITH_TRACING: false
      SUPERUSER_USERNAME: testadmin
      SUPERUSER_EMAIL: test@admin.com
      SUPERUSER_PASSWORD: test1234

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run migrations
        run: |
          python manage.py migrate
        
      - name: Run tests with Pytest
        run: |
          pytest


  docker:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_IMAGE }} .

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_IMAGE }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY}}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.AWS_EC2_USER }}/app/"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY}}
          script: |
            cd /home/${{ secrets.AWS_EC2_USER }}/app 

            cat <<EOF > .env
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
            LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}
            LANGSMITH_TRACING=${{ secrets.LANGSMITH_TRACING }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            SUPERUSER_USERNAME=${{ secrets.SUPERUSER_USERNAME }}
            SUPERUSER_EMAIL=${{ secrets.SUPERUSER_EMAIL }}
            SUPERUSER_PASSWORD=${{ secrets.SUPERUSER_PASSWORD }}
          EOF 

            docker pull ${{ secrets.DOCKER_IMAGE }}
            docker-compose down 
            docker-compose up -d
